Question 2

(a) Pair up images arbitrarily and perform comparisons. For each pair that fails the comparison, drop both images from further consideration. For each pair that results in equality, retain only one copy of the image for further consideration. If the original number of images was odd, check if the unpaired element is the majority element in a brute-force fashion - if it is the majority element return it, otherwise drop it from consideration. Proceed recursively until one image remains which has to be the majority of the 1-element array, or none remain when there is no majority element. This procedure gives us a candidate image, that we check at the end.

(b)
FindMajority(A,n)
  image = FindCandidate(A,n)
  k = 1
  for i = 1 to n
    if A[i] == image
      k++
  if k > n-k
    return image
  else
    return none

FindCandidate(A,n)
  if n == 0
    return none
  else if n == 1
    return A[n]
  B = emptylist
  i = 1
  while 2*i <= n
    if A[2*i-1] == A[2*i]
      B.insert(A[2*i-1])
  if n is odd
    // check if A[n] is the majority element //
    k = 0
    for i = 1 to n
      if A[n] == A[i]
        k++
    if k > n-k
      return A[n]
  return FindMaj(B, B.size)

(c)
It suffices to prove that if A has a majority element then B has the same majority element in the FindCandidate procedure. Call this claim (*). Why is it enough? Claim (*) would imply that if A has a majority element our FindCandidate procedure returns it, and this element passes the brute-force check in FindMajority. If A doesn't have a majority element, then no matter what FindCandidate procedure returns, that element fails the brute-force check in FindMajority procedure.

Let's prove the claim (*). If n is odd and A[n] is the majority element then we find it in the last for loop. Otherwise we throw A[n] away from consideration. Thus, let's assume without loss of generality that n is even. Let k be the number of times the majority element appears in A. Then we have k > n/2. Let k' be the number of times the majority element of A appears in B. We need to show that k' > B.size - k'.

Let's consider different types of pairs that could occur during the pairing up procedure:
type 1 - (majority element, majority element)
type 2 - (majority element, non-majority element)
type 3 - (non-majority element, non-majority element)

Let m be the number of pairs of type 1. Then the number of pairs of type 2 is k-2m. Thus, the number of pairs of type 3 is n/2-m-(k-2m) = n/2-k+m.

B will not contain any pairs of type 2. It will contain one element from each pair of type 1, and in the worst-case it will contain one element from each pair of type 3. Thus, in the worst case, B.size = m + n/2 - k + m with the majority element appearing m times. Thus, we have B.size - m = (n/2-k) + m < m.

(d) Let T(n) denote the number of invocations of comparisons in FindCandidate. Then T(n) <= T(n/2) + O(n) if n > 1, and T(n) = 0 otherwise. Note that this recurrence includes the O(n) brute-force check of element A[n] when n is odd. By Master's theorem, it solves to O(n). The FindMajority function adds another O(n) invocations of comparisons. So overall, we use O(n) invocations of comparisons.
